# -*- coding: utf-8 -*-
"""SVR model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DiCjRtliBM-Qge1J8Xiw_Lpxm45SGAND
"""
# reference: https://www.cnblogs.com/Lin-Yi/p/8971845.html
# Use support vector regression (SVR) model to make prediction
# Use "accuracy_svr" to calculate the accuracy
# plot the predicted value and actual value
from sklearn.svm import SVR
import numpy as np
# split datasets into 80% training and 20% testing 
X_train, X_test, y_train, y_test = train_test_split(data, label, test_size=0.2,random_state = 0)
# calculate the accuracy, if the actual value smaller than predict value then use actual value / predict value
#  if the predict value is smaller than actual value then use predict value / actual value
#  finally, calculate the average of the accuracy
def accuracy_svr(predict,test):
    total = 0
    for i in range(len(predict)):
        if abs(test[i]) <= abs(predict[i]):
           a = abs(test[i]) / abs(predict[i])
        else:
            a =  abs(predict[i]) / abs(test[i]) 
        total += a
    accuracy = total / len(predict)
    return accuracy  
# use SVR model to train and test data
clf = SVR(gamma='scale', C=2.0, epsilon=0.5)
clf.fit(X_train, y_train) 
predict_value  = clf.predict(X_test)
# calculate the accuracy
r = accuracy_svr(predict_value,y_test.tolist())
# Plot the value actual value vs predict value
print('the accuracy of Athenry road on SVR model is :',r)
axia = [i for i in range(1,401)]
plt.plot(axia,y_test.tolist(), c='yellow',label='actual value')
plt.plot(axia,predict_value, c='green',label='predict value')
plt.xlabel('day')
plt.ylabel('passenger flow')
plt.title('The performance of SVR')
plt.legend(loc = 2)
plt.figure()
