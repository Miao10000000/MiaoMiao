# 1) This part I decide to use linear regression to analyze the passenger flow in Galway
# 2) Extract event information from "Day", for example, "Day" is "2018-06-10", then extract"Year"(2018), "Month"(6), "Day of the month"(10).
#    Extracting features according to Irish culture
# 3) The features are ['Day',	'dayofmonth'	,'dayofweek',	'week'	,'month'	,'year'	,'season',	'dayofyear',	'Easter',	'Christmas',	'Summer/winter_holiday'	,'Halloween'	,'Patrick']
# 4) Spliting dataset into 80% training set and 20% testing set
# 5) Calculating predicting accuracy
# 6) plot the actual value and predicting value
from sklearn import metrics
from sklearn.ensemble import ExtraTreesClassifier
from sklearn import metrics
from sklearn.linear_model import LogisticRegression
import matplotlib.pyplot as plt
from sklearn import tree
from sklearn.neighbors import KNeighborsClassifier
import pandas as pd
import numpy as np
from sklearn import linear_model
from sklearn.model_selection import cross_validate
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn import metrics
from sklearn.ensemble import ExtraTreesClassifier
from sklearn import metrics
from sklearn.linear_model import LogisticRegression
import matplotlib as mpl
import matplotlib.pyplot as plt
from sklearn import tree
from sklearn.neighbors import KNeighborsClassifier
import numpy as np
from sklearn import linear_model
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LassoCV
from sklearn.linear_model import Lasso
from sklearn import metrics
from sklearn.metrics import mean_absolute_error
from sklearn.preprocessing import MinMaxScaler
from keras.layers.core import Dense, Activation, Dropout
from keras.layers.recurrent import LSTM
from keras.models import Sequential


def function_Bank_holiday(x):
  if x["year"] ==2014: 
     if (x["dayofmonth"] ==18 and x["month"] ==4) or (x["dayofmonth"] ==5 and x["month"] ==5) or (x["dayofmonth"] ==4 and x["month"] ==8) or(x["dayofmonth"] ==27 and x["month"] ==10):
        return 1
     else:
         return 0
  elif x["year"] ==2015 :
       if (x["dayofmonth"] ==4 and x["month"] ==5) or (x["dayofmonth"] ==1 and x["month"] ==6) or (x["dayofmonth"] ==3 and x["month"] ==8) or(x["dayofmonth"] ==26 and x["month"] ==10):
          return 1
       else:
            return 0
  elif x["year"] ==2016:
       if (x["dayofmonth"] ==2 and x["month"] ==5) or (x["dayofmonth"] ==6 and x["month"] ==6) or (x["dayofmonth"] ==1 and x["month"] ==8) or(x["dayofmonth"] ==31 and x["month"] ==10):
          return 1
       else:
            return 0
  else:
      return 0

def function_Patrick(x):
  f = [17,18]
  if x["dayofmonth"] in f and x["month"] ==3: 
                     return 1
  else:
       return 0

def function_Easter(x):
  v = [21,22,23,24,25,26,27,28,29,30]
  if x["dayofmonth"]in v and x["month"] ==4:
                    return 1
  else:
       return 0
    
def function_Halloween(x):
  if x["dayofmonth"]==31 and x["month"] ==10:
                    return 1
  else:
       return 0
    
def function_Christams(x):
  v = [25,26,27,28,29,30]
  g = [1,2,3,4,5]
  if x["dayofmonth"]in v and x["month"] ==12:
                    return 1
                    
  else: 
      if x["dayofmonth"]in g and x["month"] ==1:
                        return 1                
      else:
          return 0 



def accuracy_lr(predict,test):
    total = 0
    for i in range(len(predict)):
        if abs(test[i]) <= abs(predict[i]):
           a = abs(test[i]) / abs(predict[i])
        else:
            a =  abs(predict[i]) / abs(test[i]) 
        total += a
    accuracy = total / len(predict)
    return accuracy        
def function_Summer_winter(x):
  v = [6,7,8]
  h = [1,2,3,4,5,6,7,8,9,10,11,12,13,14]
  j = [20,21,22,23,24,25,26,27,28,29,30,31]
  if x["month"] in v:
                    return 1
  else:
       if x["dayofmonth"] in v and x["month"]==1:
                         return 1
       else: 
            if x["dayofmonth"]in j and x["month"]==12:
                              return 1
            else:
                 return 0
data_lough['Day']=DataFrame(pd.to_datetime(data_lough['Day']))
data_lough['dayofmonth']=data_lough['Day'].dt.day.astype(np.float64)
data_lough['dayofweek']=data_lough['Day'].dt.dayofweek.astype(np.float64)
data_lough['week']=data_lough['Day'].dt.week.astype(np.float64)
data_lough['month']=data_lough['Day'].dt.month.astype(np.float64)
data_lough['year']=data_lough['Day'].dt.year.values.astype(np.float64)
data_lough['season']=data_lough['Day'].dt.quarter.astype(np.float64)
data_lough['dayofyear']=data_lough['Day'].dt.dayofyear.astype(np.float64)
data_lough['Day']=data_lough['Day'].astype(np.int64)
data_lough['Easter'] = data_lough.apply(lambda x: function_Easter(x), axis = 1)
data_lough['Christmas'] = data_lough.apply(lambda x: function_Christams(x), axis = 1)
data_lough['Summer/winter_holiday'] = data_lough.apply(lambda x: function_Summer_winter(x), axis = 1)
data_lough['Halloween'] = data_lough.apply(lambda x: function_Halloween(x), axis = 1)
data_lough['Patrick'] = data_lough.apply(lambda x: function_Patrick(x), axis = 1)
data_lough['Total'] = data_lough['Total'].astype(np.float64)
label = data_lough["Total"].astype(np.float64)
data = data_lough.drop('Total',1)
X_train, X_test, y_train, y_test = train_test_split(data, label, test_size=0.2,random_state = 0)
# ------------------------------------------------------------------------------
# Training linear regression model
model2 = linear_model.LinearRegression()
model2.fit (X_train,y_train)
predict = model2.predict(X_test)
d = accuracy_lr(y_test.reset_index(drop=True),predict)
print("Athenry Road: Linear refression accuracy is ",d)
final_data = X_test.copy()
final_data["Predict"] = predict
final_data["Actual"] = y_test
final_data["Date"] = DataFrame(pd.to_datetime(X_test["Day"]))
# -------------------------------------------------------------------------------
#  Ploting the the result, yellow points are actual value, blue points are predict value, red line is the best linear line.
x = final_data["Date"]
y = final_data["Predict"]
y1=final_data["Actual"]
plt.title("predict value vs actual value")
plt.plot(x, y,'.', label = 'predict value')
plt.plot(x, y1,'.',label = 'acutal data')
plt.plot(x, y, linewidth = '0.1', label = "best line", color='red', linestyle=':')
plt.plot(x, y, '-',color = 'grey', label  = 'best line')
plt.legend(loc = 2)
